import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:file_picker/file_picker.dart';
import 'dashboard_page.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';

class ReportPage extends StatefulWidget {
  @override
  _ReportPageState createState() => _ReportPageState();
}

class _ReportPageState extends State<ReportPage> {
  double? _latitude;
  double? _longitude;
  Uint8List? _imageData;
  String? _selectedDisasterType;
  TextEditingController _descriptionController = TextEditingController();

  List<Marker> _markers = [];

  @override
  void initState() {
  super.initState();
  _markers.add(
    Marker(
      width: 30.0,
      height: 30.0,
      point: LatLng(-8.009560, 112.950670),
      child: Container(
        child: FlutterLogo(),
      ),
    ),
  );
}

  void _handleMarkerDrag(Marker marker, LatLng newPosition) {
    setState(() {
      _latitude = newPosition.latitude;
      _longitude = newPosition.longitude;
    });
  }

  void _updateLocationText() {
    setState(() {
      _locationController.text = 'Lat: $_latitude, Lng: $_longitude';
    });
  }

  void _getCurrentLocation() async {
    try {
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      setState(() {
        _latitude = position.latitude;
        _longitude = position.longitude;
        _updateLocationText();
      });
    } catch (e) {
      print('Error getting current location: $e');
    }
  }

  void _pickImage() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.image,
    );
    if (result != null) {
      setState(() {
        _imageData = result.files.first.bytes;
      });
    }
  }

  void _submitReport() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    final String description = _descriptionController.text;
    final String disasterType = _selectedDisasterType ?? '';
    final String status = 'menunggu';

    final String? base64Image =
        _imageData != null ? base64Encode(_imageData!) : null;

    String? latitude = _latitude?.toString();
    String? longitude = _longitude?.toString();

    const String apiUrl = 'http://localhost/report.php';

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: <String, String>{
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: {
          'description': description,
          'disasterType': disasterType,
          'status': status,
          'latitude': latitude ?? '',
          'longitude': longitude ?? '',
          'image': base64Image ?? '',
        },
      );

      if (response.statusCode == 200) {
        final responseBody = response.body;
        if (responseBody.contains('success=')) {
          Navigator.of(context).pushAndRemoveUntil(
            MaterialPageRoute(builder: (context) => DashboardPage()),
            (Route<dynamic> route) => false,
          );
        } else if (responseBody.contains('error=')) {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content:
                Text('Gagal mengirim laporan: ${responseBody.split('=')[1]}'),
            backgroundColor: Colors.red,
          ));
        } else {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content: Text('Gagal mengirim laporan: Respons tidak dikenali'),
            backgroundColor: Colors.red,
          ));
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('Gagal mengirim laporan: ${response.reasonPhrase}'),
          backgroundColor: Colors.red,
        ));
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Terjadi kesalahan: $e'),
        backgroundColor: Colors.red,
      ));
    }
  }

  final TextEditingController _locationController = TextEditingController();
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Laporkan Bencana Alam'),
        backgroundColor: const Color(0xFFF9C416),
      ),
      body: Stack(
        children: [
          FlutterMap(
            options: MapOptions(
              initialCenter: LatLng(-8.009560, 112.950670),
              initialZoom: 13.0,
              initialCameraFit: CameraFit.bounds(
                bounds: LatLngBounds(
                  LatLng(-7.8880636984028945, 112.8124997303773),
                  LatLng(-8.235421235273524, 113.14326131375316),
                ),
              ),
              interactiveFlags: InteractiveFlag.all,
            ),
            children: [
              openStreetMapTileLayer,
              MarkerLayer(markers: _markers),
            ],
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Center(
              child: SizedBox(
                width: MediaQuery.of(context).size.width * 0.8,
                height: MediaQuery.of(context).size.height * 0.7,
                child: SingleChildScrollView(
                  child: Form(
                    key: _formKey,
                    autovalidateMode: AutovalidateMode.onUserInteraction,
                    child: Container(
                      padding: EdgeInsets.all(16.0),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.8),
                        borderRadius: BorderRadius.circular(10),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black26,
                            blurRadius: 10,
                            offset: Offset(0, 5),
                          ),
                        ],
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          Text(
                            'Judul Laporan',
                            style: TextStyle(
                              fontSize: 18.0,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: 8.0),
                          _buildDisasterTypeDropdown(),
                          SizedBox(height: 16.0),
                          Text(
                            'Pilih Lokasi',
                            style: TextStyle(
                              fontSize: 18.0,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: 8.0),
                          _buildLocationSelection(),
                          SizedBox(height: 16.0),
                          TextFormField(
                            controller: _locationController,
                            decoration: InputDecoration(
                              labelText: 'Lokasi',
                              border: OutlineInputBorder(),
                            ),
                            readOnly: true,
                          ),
                          SizedBox(height: 16.0),
                          TextFormField(
                            controller: _descriptionController,
                            decoration: InputDecoration(
                              labelText: 'Deskripsi Singkat',
                              border: OutlineInputBorder(),
                            ),
                            maxLines: 3,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter a description';
                              }
                              return null;
                            },
                          ),
                          SizedBox(height: 16.0),
                          ElevatedButton(
                            onPressed: () {
                              _pickImage();
                            },
                            child: Text('Ambil Foto'),
                          ),
                          SizedBox(height: 16.0),
                          ElevatedButton(
                            onPressed: () {
                              _getCurrentLocation();
                            },
                            child: Text('Pilih Lokasi Anda Sekarang'),
                          ),
                          SizedBox(height: 16.0),
                          ElevatedButton(
                            onPressed: () {
                              _submitReport();
                            },
                            child: Text('Laporkan'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDisasterTypeDropdown() {
    return DropdownButtonFormField<String>(
      value: _selectedDisasterType,
      onChanged: (String? newValue) {
        setState(() {
          _selectedDisasterType = newValue;
        });
      },
      decoration: InputDecoration(
        labelText: 'Jenis Bencana',
        border: OutlineInputBorder(),
      ),
      items: [
        DropdownMenuItem(
          value: 'Banjir',
          child: Row(
            children: [
              Icon(Icons.invert_colors, color: Colors.blue),
              SizedBox(width: 8.0),
              Text('Banjir'),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'Longsor',
          child: Row(
            children: [
              Icon(Icons.terrain, color: Colors.brown),
              SizedBox(width: 8.0),
              Text('Longsor'),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'Erupsi',
          child: Row(
            children: [
              Icon(Icons.whatshot, color: Colors.red),
              SizedBox(width: 8.0),
              Text('Erupsi'),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'Lahar Panas',
          child: Row(
            children: [
              Icon(Icons.local_fire_department, color: Colors.orange),
              SizedBox(width: 8.0),
              Text('Lahar Panas'),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'Lahar Dingin',
          child: Row(
            children: [
              Icon(Icons.ac_unit, color: Colors.cyan),
              SizedBox(width: 8.0),
              Text('Lahar Dingin'),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'Gempa',
          child: Row(
            children: [
              Icon(Icons.vibration, color: Colors.grey),
              SizedBox(width: 8.0),
              Text('Gempa'),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'Angin Topan',
          child: Row(
            children: [
              Icon(Icons.air, color: Colors.lightBlue),
              SizedBox(width: 8.0),
              Text('Angin Topan'),
            ],
          ),
        ),
      ],
      hint: Text('Pilih Jenis Bencana'),
    );
  }

  Widget _buildLocationSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        ElevatedButton(
          onPressed: () {
            _pickImage();
          },
          child: Text('Ambil Foto'),
        ),
        SizedBox(height: 16.0),
        ElevatedButton(
          onPressed: () {
            _getCurrentLocation();
          },
          child: Text('Pilih Lokasi Anda Sekarang'),
        ),
      ],
    );
  }
}

TileLayer get openStreetMapTileLayer => TileLayer(
      urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
      userAgentPackageName: 'dev.fleaflet.flutter_map.example',
    );
